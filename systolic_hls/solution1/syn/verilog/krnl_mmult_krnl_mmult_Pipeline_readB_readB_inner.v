// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_mmult_krnl_mmult_Pipeline_readB_readB_inner (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        zext_ln212_1,
        sext_ln221,
        bound29,
        localB_0_address0,
        localB_0_ce0,
        localB_0_we0,
        localB_0_d0,
        localB_1_address0,
        localB_1_ce0,
        localB_1_we0,
        localB_1_d0,
        localB_2_address0,
        localB_2_ce0,
        localB_2_we0,
        localB_2_d0,
        localB_3_address0,
        localB_3_ce0,
        localB_3_we0,
        localB_3_d0,
        localB_4_address0,
        localB_4_ce0,
        localB_4_we0,
        localB_4_d0,
        localB_5_address0,
        localB_5_ce0,
        localB_5_we0,
        localB_5_d0,
        localB_6_address0,
        localB_6_ce0,
        localB_6_we0,
        localB_6_d0,
        localB_7_address0,
        localB_7_ce0,
        localB_7_we0,
        localB_7_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [11:0] zext_ln212_1;
input  [57:0] sext_ln221;
input  [75:0] bound29;
output  [11:0] localB_0_address0;
output   localB_0_ce0;
output   localB_0_we0;
output  [31:0] localB_0_d0;
output  [11:0] localB_1_address0;
output   localB_1_ce0;
output   localB_1_we0;
output  [31:0] localB_1_d0;
output  [11:0] localB_2_address0;
output   localB_2_ce0;
output   localB_2_we0;
output  [31:0] localB_2_d0;
output  [11:0] localB_3_address0;
output   localB_3_ce0;
output   localB_3_we0;
output  [31:0] localB_3_d0;
output  [11:0] localB_4_address0;
output   localB_4_ce0;
output   localB_4_we0;
output  [31:0] localB_4_d0;
output  [11:0] localB_5_address0;
output   localB_5_ce0;
output   localB_5_we0;
output  [31:0] localB_5_d0;
output  [11:0] localB_6_address0;
output   localB_6_ce0;
output   localB_6_we0;
output  [31:0] localB_6_d0;
output  [11:0] localB_7_address0;
output   localB_7_ce0;
output   localB_7_we0;
output  [31:0] localB_7_d0;

reg ap_idle;
reg m_axi_gmem_RREADY;
reg localB_0_ce0;
reg localB_0_we0;
reg localB_1_ce0;
reg localB_1_we0;
reg localB_2_ce0;
reg localB_2_we0;
reg localB_3_ce0;
reg localB_3_we0;
reg localB_4_ce0;
reg localB_4_we0;
reg localB_5_ce0;
reg localB_5_we0;
reg localB_6_ce0;
reg localB_6_we0;
reg localB_7_ce0;
reg localB_7_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln221_reg_459;
reg   [0:0] icmp_ln224_reg_474;
reg    ap_predicate_op35_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln221_fu_283_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln221_reg_459_pp0_iter2_reg;
wire   [0:0] icmp_ln223_fu_297_p2;
reg   [0:0] icmp_ln223_reg_463;
reg   [0:0] icmp_ln223_reg_463_pp0_iter2_reg;
wire   [12:0] select_ln221_fu_303_p3;
reg   [12:0] select_ln221_reg_469;
reg   [12:0] select_ln221_reg_469_pp0_iter2_reg;
wire   [0:0] icmp_ln224_fu_315_p2;
reg   [0:0] icmp_ln224_reg_474_pp0_iter2_reg;
reg   [511:0] gmem_addr_read_reg_478;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [511:0] ap_phi_mux_empty_phi_fu_246_p4;
wire   [511:0] ap_phi_reg_pp0_iter3_empty_reg_243;
wire   [511:0] shiftreg_cast_fu_373_p1;
wire   [63:0] k_1_cast77_fu_378_p1;
reg   [479:0] shiftreg_fu_100;
wire    ap_loop_init;
reg   [12:0] k_1_fu_104;
wire   [12:0] add_ln223_fu_321_p2;
reg   [63:0] j_fu_108;
wire   [63:0] select_ln221_2_fu_362_p3;
wire   [63:0] zext_ln212_1_cast_fu_256_p1;
reg   [75:0] indvar_flatten32_fu_112;
wire   [75:0] add_ln221_fu_288_p2;
wire   [2:0] trunc_ln221_fu_369_p1;
wire   [31:0] trunc_ln224_fu_389_p1;
wire   [3:0] empty_44_fu_311_p1;
wire   [63:0] add_ln221_1_fu_356_p2;
wire   [479:0] select_ln221_1_fu_349_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

krnl_mmult_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten32_fu_112 <= 76'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln221_fu_283_p2 == 1'd0))) begin
            indvar_flatten32_fu_112 <= add_ln221_fu_288_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_108 <= zext_ln212_1_cast_fu_256_p1;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            j_fu_108 <= select_ln221_2_fu_362_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_1_fu_104 <= 13'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln221_fu_283_p2 == 1'd0))) begin
            k_1_fu_104 <= add_ln223_fu_321_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            shiftreg_fu_100 <= 480'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            shiftreg_fu_100 <= {{ap_phi_mux_empty_phi_fu_246_p4[511:32]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln221_reg_459 <= icmp_ln221_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op35_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_478 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln221_reg_459_pp0_iter2_reg <= icmp_ln221_reg_459;
        icmp_ln223_reg_463_pp0_iter2_reg <= icmp_ln223_reg_463;
        icmp_ln224_reg_474_pp0_iter2_reg <= icmp_ln224_reg_474;
        select_ln221_reg_469_pp0_iter2_reg <= select_ln221_reg_469;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln221_fu_283_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln223_reg_463 <= icmp_ln223_fu_297_p2;
        icmp_ln224_reg_474 <= icmp_ln224_fu_315_p2;
        select_ln221_reg_469 <= select_ln221_fu_303_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln221_fu_283_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_459 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln221_reg_459_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln224_reg_474_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_246_p4 = shiftreg_cast_fu_373_p1;
        end else if ((icmp_ln224_reg_474_pp0_iter2_reg == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_246_p4 = gmem_addr_read_reg_478;
        end else begin
            ap_phi_mux_empty_phi_fu_246_p4 = ap_phi_reg_pp0_iter3_empty_reg_243;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_246_p4 = ap_phi_reg_pp0_iter3_empty_reg_243;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_0_ce0 = 1'b1;
    end else begin
        localB_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln221_fu_369_p1 == 3'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_0_we0 = 1'b1;
    end else begin
        localB_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_1_ce0 = 1'b1;
    end else begin
        localB_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln221_fu_369_p1 == 3'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_1_we0 = 1'b1;
    end else begin
        localB_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_2_ce0 = 1'b1;
    end else begin
        localB_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln221_fu_369_p1 == 3'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_2_we0 = 1'b1;
    end else begin
        localB_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_3_ce0 = 1'b1;
    end else begin
        localB_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln221_fu_369_p1 == 3'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_3_we0 = 1'b1;
    end else begin
        localB_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_4_ce0 = 1'b1;
    end else begin
        localB_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln221_fu_369_p1 == 3'd4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_4_we0 = 1'b1;
    end else begin
        localB_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_5_ce0 = 1'b1;
    end else begin
        localB_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln221_fu_369_p1 == 3'd5) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_5_we0 = 1'b1;
    end else begin
        localB_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_6_ce0 = 1'b1;
    end else begin
        localB_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln221_fu_369_p1 == 3'd6) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_6_we0 = 1'b1;
    end else begin
        localB_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_7_ce0 = 1'b1;
    end else begin
        localB_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln221_fu_369_p1 == 3'd7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_7_we0 = 1'b1;
    end else begin
        localB_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln221_1_fu_356_p2 = (j_fu_108 + 64'd1);

assign add_ln221_fu_288_p2 = (indvar_flatten32_fu_112 + 76'd1);

assign add_ln223_fu_321_p2 = (select_ln221_fu_303_p3 + 13'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_predicate_op35_read_state3 == 1'b1) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_predicate_op35_read_state3 == 1'b1) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op35_read_state3 == 1'b1) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter3_empty_reg_243 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state3 = ((icmp_ln224_reg_474 == 1'd1) & (icmp_ln221_reg_459 == 1'd0));
end

assign empty_44_fu_311_p1 = select_ln221_fu_303_p3[3:0];

assign icmp_ln221_fu_283_p2 = ((indvar_flatten32_fu_112 == bound29) ? 1'b1 : 1'b0);

assign icmp_ln223_fu_297_p2 = ((k_1_fu_104 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_315_p2 = ((empty_44_fu_311_p1 == 4'd0) ? 1'b1 : 1'b0);

assign k_1_cast77_fu_378_p1 = select_ln221_reg_469_pp0_iter2_reg;

assign localB_0_address0 = k_1_cast77_fu_378_p1;

assign localB_0_d0 = trunc_ln224_fu_389_p1;

assign localB_1_address0 = k_1_cast77_fu_378_p1;

assign localB_1_d0 = trunc_ln224_fu_389_p1;

assign localB_2_address0 = k_1_cast77_fu_378_p1;

assign localB_2_d0 = trunc_ln224_fu_389_p1;

assign localB_3_address0 = k_1_cast77_fu_378_p1;

assign localB_3_d0 = trunc_ln224_fu_389_p1;

assign localB_4_address0 = k_1_cast77_fu_378_p1;

assign localB_4_d0 = trunc_ln224_fu_389_p1;

assign localB_5_address0 = k_1_cast77_fu_378_p1;

assign localB_5_d0 = trunc_ln224_fu_389_p1;

assign localB_6_address0 = k_1_cast77_fu_378_p1;

assign localB_6_d0 = trunc_ln224_fu_389_p1;

assign localB_7_address0 = k_1_cast77_fu_378_p1;

assign localB_7_d0 = trunc_ln224_fu_389_p1;

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign select_ln221_1_fu_349_p3 = ((icmp_ln223_reg_463_pp0_iter2_reg[0:0] == 1'b1) ? 480'd0 : shiftreg_fu_100);

assign select_ln221_2_fu_362_p3 = ((icmp_ln223_reg_463_pp0_iter2_reg[0:0] == 1'b1) ? add_ln221_1_fu_356_p2 : j_fu_108);

assign select_ln221_fu_303_p3 = ((icmp_ln223_fu_297_p2[0:0] == 1'b1) ? 13'd0 : k_1_fu_104);

assign shiftreg_cast_fu_373_p1 = select_ln221_1_fu_349_p3;

assign trunc_ln221_fu_369_p1 = select_ln221_2_fu_362_p3[2:0];

assign trunc_ln224_fu_389_p1 = ap_phi_mux_empty_phi_fu_246_p4[31:0];

assign zext_ln212_1_cast_fu_256_p1 = zext_ln212_1;

endmodule //krnl_mmult_krnl_mmult_Pipeline_readB_readB_inner
