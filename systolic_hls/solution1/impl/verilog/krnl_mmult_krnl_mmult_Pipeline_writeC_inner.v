// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_mmult_krnl_mmult_Pipeline_writeC_inner (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        zext_ln197,
        sext_ln270,
        zext_ln199,
        trunc_ln2,
        localC_0_0_5,
        localC_0_1_5,
        localC_0_2_5,
        localC_0_3_5,
        localC_0_4_5,
        localC_0_5_5,
        localC_0_6_5,
        localC_0_7_5,
        localC_1_0_5,
        localC_1_1_5,
        localC_1_2_5,
        localC_1_3_5,
        localC_1_4_5,
        localC_1_5_5,
        localC_1_6_5,
        localC_1_7_5,
        localC_2_0_5,
        localC_2_1_5,
        localC_2_2_5,
        localC_2_3_5,
        localC_2_4_5,
        localC_2_5_5,
        localC_2_6_5,
        localC_2_7_5,
        localC_3_0_5,
        localC_3_1_5,
        localC_3_2_5,
        localC_3_3_5,
        localC_3_4_5,
        localC_3_5_5,
        localC_3_6_5,
        localC_3_7_5,
        localC_4_0_5,
        localC_4_1_5,
        localC_4_2_5,
        localC_4_3_5,
        localC_4_4_5,
        localC_4_5_5,
        localC_4_6_5,
        localC_4_7_5,
        localC_5_0_5,
        localC_5_1_5,
        localC_5_2_5,
        localC_5_3_5,
        localC_5_4_5,
        localC_5_5_5,
        localC_5_6_5,
        localC_5_7_5,
        localC_6_0_5,
        localC_6_1_5,
        localC_6_2_5,
        localC_6_3_5,
        localC_6_4_5,
        localC_6_5_5,
        localC_6_6_5,
        localC_6_7_5,
        localC_7_0_5,
        localC_7_1_5,
        localC_7_2_5,
        localC_7_3_5,
        localC_7_4_5,
        localC_7_5_5,
        localC_7_6_5,
        localC_7_7_5
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [10:0] zext_ln197;
input  [61:0] sext_ln270;
input  [10:0] zext_ln199;
input  [2:0] trunc_ln2;
input  [31:0] localC_0_0_5;
input  [31:0] localC_0_1_5;
input  [31:0] localC_0_2_5;
input  [31:0] localC_0_3_5;
input  [31:0] localC_0_4_5;
input  [31:0] localC_0_5_5;
input  [31:0] localC_0_6_5;
input  [31:0] localC_0_7_5;
input  [31:0] localC_1_0_5;
input  [31:0] localC_1_1_5;
input  [31:0] localC_1_2_5;
input  [31:0] localC_1_3_5;
input  [31:0] localC_1_4_5;
input  [31:0] localC_1_5_5;
input  [31:0] localC_1_6_5;
input  [31:0] localC_1_7_5;
input  [31:0] localC_2_0_5;
input  [31:0] localC_2_1_5;
input  [31:0] localC_2_2_5;
input  [31:0] localC_2_3_5;
input  [31:0] localC_2_4_5;
input  [31:0] localC_2_5_5;
input  [31:0] localC_2_6_5;
input  [31:0] localC_2_7_5;
input  [31:0] localC_3_0_5;
input  [31:0] localC_3_1_5;
input  [31:0] localC_3_2_5;
input  [31:0] localC_3_3_5;
input  [31:0] localC_3_4_5;
input  [31:0] localC_3_5_5;
input  [31:0] localC_3_6_5;
input  [31:0] localC_3_7_5;
input  [31:0] localC_4_0_5;
input  [31:0] localC_4_1_5;
input  [31:0] localC_4_2_5;
input  [31:0] localC_4_3_5;
input  [31:0] localC_4_4_5;
input  [31:0] localC_4_5_5;
input  [31:0] localC_4_6_5;
input  [31:0] localC_4_7_5;
input  [31:0] localC_5_0_5;
input  [31:0] localC_5_1_5;
input  [31:0] localC_5_2_5;
input  [31:0] localC_5_3_5;
input  [31:0] localC_5_4_5;
input  [31:0] localC_5_5_5;
input  [31:0] localC_5_6_5;
input  [31:0] localC_5_7_5;
input  [31:0] localC_6_0_5;
input  [31:0] localC_6_1_5;
input  [31:0] localC_6_2_5;
input  [31:0] localC_6_3_5;
input  [31:0] localC_6_4_5;
input  [31:0] localC_6_5_5;
input  [31:0] localC_6_6_5;
input  [31:0] localC_6_7_5;
input  [31:0] localC_7_0_5;
input  [31:0] localC_7_1_5;
input  [31:0] localC_7_2_5;
input  [31:0] localC_7_3_5;
input  [31:0] localC_7_4_5;
input  [31:0] localC_7_5_5;
input  [31:0] localC_7_6_5;
input  [31:0] localC_7_7_5;

reg ap_idle;
reg m_axi_gmem_WVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln270_fu_629_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln199_cast_fu_604_p1;
reg   [63:0] zext_ln199_cast_reg_1062;
wire   [31:0] tmp_5_fu_649_p66;
reg   [31:0] tmp_5_reg_1080;
wire    ap_block_pp0_stage0_01001;
reg   [63:0] j_fu_184;
wire   [63:0] add_ln270_fu_719_p2;
wire   [63:0] zext_ln197_cast_fu_612_p1;
wire    ap_loop_init;
wire   [2:0] empty_fu_634_p1;
wire   [5:0] tmp_s_fu_638_p3;
wire   [6:0] tmp_5_fu_649_p65;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

krnl_mmult_mux_647_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 32 ),
    .din61_WIDTH( 32 ),
    .din62_WIDTH( 32 ),
    .din63_WIDTH( 32 ),
    .din64_WIDTH( 7 ),
    .dout_WIDTH( 32 ))
mux_647_32_1_1_U430(
    .din0(localC_0_0_5),
    .din1(localC_0_1_5),
    .din2(localC_0_2_5),
    .din3(localC_0_3_5),
    .din4(localC_0_4_5),
    .din5(localC_0_5_5),
    .din6(localC_0_6_5),
    .din7(localC_0_7_5),
    .din8(localC_1_0_5),
    .din9(localC_1_1_5),
    .din10(localC_1_2_5),
    .din11(localC_1_3_5),
    .din12(localC_1_4_5),
    .din13(localC_1_5_5),
    .din14(localC_1_6_5),
    .din15(localC_1_7_5),
    .din16(localC_2_0_5),
    .din17(localC_2_1_5),
    .din18(localC_2_2_5),
    .din19(localC_2_3_5),
    .din20(localC_2_4_5),
    .din21(localC_2_5_5),
    .din22(localC_2_6_5),
    .din23(localC_2_7_5),
    .din24(localC_3_0_5),
    .din25(localC_3_1_5),
    .din26(localC_3_2_5),
    .din27(localC_3_3_5),
    .din28(localC_3_4_5),
    .din29(localC_3_5_5),
    .din30(localC_3_6_5),
    .din31(localC_3_7_5),
    .din32(localC_4_0_5),
    .din33(localC_4_1_5),
    .din34(localC_4_2_5),
    .din35(localC_4_3_5),
    .din36(localC_4_4_5),
    .din37(localC_4_5_5),
    .din38(localC_4_6_5),
    .din39(localC_4_7_5),
    .din40(localC_5_0_5),
    .din41(localC_5_1_5),
    .din42(localC_5_2_5),
    .din43(localC_5_3_5),
    .din44(localC_5_4_5),
    .din45(localC_5_5_5),
    .din46(localC_5_6_5),
    .din47(localC_5_7_5),
    .din48(localC_6_0_5),
    .din49(localC_6_1_5),
    .din50(localC_6_2_5),
    .din51(localC_6_3_5),
    .din52(localC_6_4_5),
    .din53(localC_6_5_5),
    .din54(localC_6_6_5),
    .din55(localC_6_7_5),
    .din56(localC_7_0_5),
    .din57(localC_7_1_5),
    .din58(localC_7_2_5),
    .din59(localC_7_3_5),
    .din60(localC_7_4_5),
    .din61(localC_7_5_5),
    .din62(localC_7_6_5),
    .din63(localC_7_7_5),
    .din64(tmp_5_fu_649_p65),
    .dout(tmp_5_fu_649_p66)
);

krnl_mmult_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_184 <= zext_ln197_cast_fu_612_p1;
        end else if (((icmp_ln270_fu_629_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_184 <= add_ln270_fu_719_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln270_fu_629_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_5_reg_1080 <= tmp_5_fu_649_p66;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln199_cast_reg_1062[10 : 0] <= zext_ln199_cast_fu_604_p1[10 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln270_fu_629_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln270_fu_719_p2 = (j_fu_184 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_fu_634_p1 = j_fu_184[2:0];

assign icmp_ln270_fu_629_p2 = (($signed(j_fu_184) < $signed(zext_ln199_cast_reg_1062)) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = tmp_5_reg_1080;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign tmp_5_fu_649_p65 = tmp_s_fu_638_p3;

assign tmp_s_fu_638_p3 = {{trunc_ln2}, {empty_fu_634_p1}};

assign zext_ln197_cast_fu_612_p1 = zext_ln197;

assign zext_ln199_cast_fu_604_p1 = zext_ln199;

always @ (posedge ap_clk) begin
    zext_ln199_cast_reg_1062[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //krnl_mmult_krnl_mmult_Pipeline_writeC_inner
